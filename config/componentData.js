module.exports = [{"name":"Button","description":"","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"id of the button"},"label":{"type":{"name":"string"},"required":true,"description":"Label of the butto"},"onClick":{"type":{"name":"func"},"required":true,"description":"Callback for onclick event"},"type":{"type":{"name":"enum","value":[{"value":"\"button\"","computed":false},{"value":"\"submit\"","computed":false},{"value":"\"reset\"","computed":false}]},"required":false,"description":"Type of buttons","defaultValue":{"value":"\"button\"","computed":false}},"className":{"type":{"name":"enum","value":[{"value":"\"btn-primary\"","computed":false},{"value":"\"btn-secondary\"","computed":false},{"value":"\"btn-success\"","computed":false},{"value":"\"btn-danger\"","computed":false}]},"required":true,"description":"Type of the butto"},"disabled":{"type":{"name":"bool"},"required":false,"description":"Value","defaultValue":{"value":"false","computed":false}}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({\r\n  htmlId,\r\n  label,\r\n  type = \"button\",\r\n  onClick,\r\n  className,\r\n  disabled = false,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <button\r\n        id={htmlId}\r\n        type={type}\r\n        onClick={onClick}\r\n        className={`btn ${className}`}\r\n        disabled={disabled}\r\n        data-testid=\"button\"\r\n        {...props}\r\n      >\r\n        {label}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  /** id of the button */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Label of the butto */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Callback for onclick event */\r\n  onClick: PropTypes.func.isRequired,\r\n\r\n  /** Type of buttons */\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n\r\n  /** Type of the butto */\r\n  className: PropTypes.oneOf([\r\n    \"btn-primary\",\r\n    \"btn-secondary\",\r\n    \"btn-success\",\r\n    \"btn-danger\",\r\n  ]).isRequired,\r\n\r\n  /** Value */\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nexport default Button;\r\n","examples":[{"name":"ExampleButton","description":"With a custom message:","code":"import React from \"react\";\r\nimport Button from \"ps-react/Button\";\r\n/** With a custom message: */\r\nexport default function ExampleButton() {\r\n  function hadleClick(e) {}\r\n  return (\r\n    <div style={{ display: \"flex\", gap: \"10px\" }}>\r\n      <Button\r\n        htmlId=\"htmlId\"\r\n        label=\"Primary\"\r\n        type=\"button\"\r\n        onClick={hadleClick}\r\n        className=\"btn-primary\"\r\n      />\r\n      <Button\r\n        htmlId=\"htmlId2\"\r\n        label=\"Secondary\"\r\n        type=\"button\"\r\n        onClick={hadleClick}\r\n        className=\"btn-secondary\"\r\n      />\r\n      <Button\r\n        htmlId=\"htmlId3\"\r\n        label=\"Success\"\r\n        type=\"button\"\r\n        onClick={hadleClick}\r\n        className=\"btn-success\"\r\n      />\r\n      <Button\r\n        htmlId=\"htmlId4\"\r\n        label=\"Danger\"\r\n        type=\"button\"\r\n        onClick={hadleClick}\r\n        className=\"btn-danger\"\r\n        required={false}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"},{"name":"ExampleDisableButton","description":"With a custom message:","code":"import React from \"react\";\r\nimport Button from \"ps-react/Button\";\r\n/** With a custom message: */\r\nexport default function ExampleDisableButton() {\r\n  function hadleClick(e) {}\r\n  return (\r\n    <div style={{ display: \"flex\", gap: \"10px\" }}>\r\n      <Button\r\n        htmlId=\"htmlId\"\r\n        label=\"Primary\"\r\n        type=\"button\"\r\n        onClick={hadleClick}\r\n        className=\"btn-primary\"\r\n        disabled={true}\r\n      />\r\n      <Button\r\n        htmlId=\"htmlId2\"\r\n        label=\"Secondary\"\r\n        type=\"button\"\r\n        onClick={hadleClick}\r\n        className=\"btn-secondary\"\r\n        disabled={true}\r\n      />\r\n      <Button\r\n        htmlId=\"htmlId3\"\r\n        label=\"Success\"\r\n        type=\"button\"\r\n        onClick={hadleClick}\r\n        className=\"btn-success\"\r\n        disabled={true}\r\n      />\r\n      <Button\r\n        htmlId=\"htmlId4\"\r\n        label=\"Danger\"\r\n        type=\"button\"\r\n        onClick={hadleClick}\r\n        className=\"btn-danger\"\r\n        disabled={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"}]},{"name":"Card","description":"","code":"import React from \"react\";\r\nimport Image from \"../Image\";\r\nimport \"./style.css\";\r\n\r\nconst Card = ({ title, text, image }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <Image src={image} className=\"card-img-top\" alt=\"asasas\" />\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{title}</h5>\r\n        <p className=\"card-text\">{text}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCard.propTypes = {};\r\n\r\nexport default Card;\r\n","examples":[{"name":"CardExample","description":"With a custom message:","code":"import React from \"react\";\r\nimport Card from \"ps-react/Card\";\r\nimport VerticalImg from \"../../../../public/images/vertical.jpg\";\r\nimport HorizontalImg from \"../../../../public/images/horizontal.jpg\";\r\n\r\n/** With a custom message: */\r\nexport default function CardExample() {\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <Card title=\"Title vertical card\" text=\"Titke text\" image={VerticalImg} />\r\n    </div>\r\n  );\r\n}\r\n"}]},{"name":"CardList","description":"","code":"import React from \"react\";\r\nimport Card from \"../Card\";\r\nimport \"./style.css\";\r\n\r\nconst CardList = ({ items }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {items.map((item) => (\r\n        <Card\r\n          key={item.id}\r\n          title={item.title}\r\n          text={item.text}\r\n          image={item.image}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nCardList.propTypes = {};\r\n\r\nexport default CardList;\r\n","examples":[{"name":"ExampleCardList","description":"With a custom message:","code":"import React from \"react\";\r\nimport CardList from \"ps-react/CardList\";\r\nimport VerticalImg from \"../../../../public/images/vertical.jpg\";\r\nimport HorizontalImg from \"../../../../public/images/horizontal.jpg\";\r\n\r\n/** With a custom message: */\r\nexport default function ExampleCardList() {\r\n  return <CardList items={navItems} />;\r\n}\r\n\r\nconst navItems = [\r\n  {\r\n    htmlId: \"cardId1\",\r\n    title: \"This is title\",\r\n    text: \"this is text\",\r\n    image: VerticalImg,\r\n  },\r\n  {\r\n    id: \"cardId2\",\r\n    title: \"This is title\",\r\n    text: \"this is text\",\r\n    image: HorizontalImg,\r\n  },\r\n];\r\n"}]},{"name":"Checkout","description":"","props":{"onSubmit":{"type":{"name":"func"},"required":true,"description":""}},"code":"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst STATUS = {\r\n  IDLE: \"IDLE\",\r\n  SUBMITTED: \"SUBMITTED\",\r\n  SUBMITING: \"SUBMITING\",\r\n  COMPLETTED: \"COMPLETTED\",\r\n};\r\n\r\nfunction Checkout({ onSubmit, children }) {\r\n  const [status, setStatus] = useState(STATUS.IDLE);\r\n  const [saveError, setSaveError] = useState(null);\r\n\r\n  console.log(\"checkout\");\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    setStatus(STATUS.SUBMITING);\r\n    try {\r\n      await onSubmit(event);\r\n      setStatus(STATUS.COMPLETTED);\r\n    } catch (error) {\r\n      setSaveError(error);\r\n    }\r\n  }\r\n\r\n  if (saveError) throw saveError;\r\n\r\n  // Render the \"Saved\" message when the form is completed\r\n  if (status === STATUS.COMPLETTED) {\r\n    return <div>Saved</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>{children}</form>\r\n    </div>\r\n  );\r\n}\r\n\r\nCheckout.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Checkout;\r\n","examples":[{"name":"ExampleCheckout","description":"","code":"import React, { useState } from \"react\";\r\nimport Checkout from \"ps-react/Checkout\";\r\nimport TextInput from \"ps-react/TextInput\";\r\nimport TextArea from \"ps-react/TextArea\";\r\nimport Select from \"ps-react/Select\";\r\nimport Button from \"ps-react/Button\";\r\n\r\nconst options = [\r\n  { label: \"Company Specifics\", value: \"CompanySpecifics\" },\r\n  { label: \"Open Category\", value: \"OpenCategory\" },\r\n];\r\n\r\nconst validationRules = {\r\n  name: {\r\n    validate: (value) => {\r\n      const isValidLength = value && value.length >= 4 && value.length <= 10;\r\n      const doesNotContainInvalidChar = !/@/.test(value);\r\n      return isValidLength && doesNotContainInvalidChar;\r\n    },\r\n    errorMessage:\r\n      \"Name must be between 4 and 10 characters long and not contain '@'\",\r\n  },\r\n  description: {\r\n    validate: (value) => {\r\n      const isValidLength = value && value.length >= 4 && value.length <= 10;\r\n      const doesNotContainInvalidChar = !/@/.test(value);\r\n      return isValidLength && doesNotContainInvalidChar;\r\n    },\r\n    errorMessage:\r\n      \"Description must be between 4 and 10 characters long and not contain '@'\",\r\n  },\r\n};\r\n\r\nfunction ExampleForm() {\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n    type: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const isValid = Object.keys(errors).length === 0;\r\n  // const [message, setMessage] = useState(\"\");\r\n\r\n  function handleChange(e) {\r\n    const { id, value } = e.target;\r\n\r\n    setData((currData) => ({\r\n      ...currData,\r\n      [id]: value,\r\n    }));\r\n\r\n    const newErrors = getErrors({ ...data, [id]: value });\r\n    setErrors(newErrors);\r\n  }\r\n\r\n  async function handleSubmit(event) {\r\n    console.log(\"submit\");\r\n    event.preventDefault();\r\n    if (isValid) {\r\n      try {\r\n        console.log(data);\r\n      } catch (error) {}\r\n    }\r\n  }\r\n\r\n  function getErrors(data) {\r\n    const result = {};\r\n\r\n    Object.keys(data).forEach((key) => {\r\n      const value = data[key];\r\n      const rule = validationRules[key];\r\n\r\n      if (rule && !rule.validate(value)) {\r\n        result[key] = rule.errorMessage;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  return (\r\n    <Checkout onSubmit={handleSubmit}>\r\n      <TextInput\r\n        htmlId=\"name\"\r\n        name=\"name\"\r\n        label=\"Name:\"\r\n        type=\"text\"\r\n        required\r\n        onChange={handleChange}\r\n        placeholder=\"Enter a name\"\r\n        value={data.name}\r\n        feedback={errors.name}\r\n        isSuccess={!errors.name}\r\n      />\r\n      <TextArea\r\n        htmlId=\"description\"\r\n        name=\"description\"\r\n        label=\"Description\"\r\n        required={false}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter a description\"\r\n        value={data.value}\r\n        feedback={errors.description}\r\n        isSuccess={!errors.description}\r\n      />\r\n      <Select\r\n        htmlId=\"type\"\r\n        name=\"type\"\r\n        label=\"Type event\"\r\n        required={false}\r\n        onChange={handleChange}\r\n        placeHolder={\"Select an option\"}\r\n        value={data.value}\r\n        options={options}\r\n      />\r\n      <Button\r\n        htmlId=\"htmlIdButton\"\r\n        label=\"Submit\"\r\n        type=\"submit\"\r\n        onClick={handleSubmit}\r\n        className=\"btn-primary\"\r\n      />\r\n    </Checkout>\r\n  );\r\n}\r\n// {message && <div>{message}</div>}\r\n\r\nexport default ExampleForm;\r\n"}]},{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react';\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default EyeIcon;\r\n","examples":[{"name":"Example","description":"","code":"import React from 'react';\r\nimport EyeIcon from 'ps-react/EyeIcon';\r\n\r\nexport default function EyeIconExample() {\r\n  return <EyeIcon />;\r\n}\r\n"}]},{"name":"Image","description":"","props":{"src":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":true,"description":""},"alt":{"type":{"name":"string"},"required":true,"description":""}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Image = ({ src, className, alt, ...props }) => {\r\n  return <img src={src} className={className} alt={alt} {...props} />;\r\n};\r\n\r\nImage.propTypes = {\r\n  src: PropTypes.string,\r\n  className: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Image;\r\n","examples":[{"name":"ImageExample","description":"Vertical Image resize","code":"import React from \"react\";\r\nimport Image from \"ps-react/Image\";\r\nimport ProfilePicture from \"../../../../public/images/vertical.jpg\";\r\n\r\n/** Vertical Image resize */\r\nexport default function ImageExample() {\r\n  return <Image src={ProfilePicture} className=\"card-img-top\" alt=\"asasas\" />;\r\n}\r\n"}]},{"name":"Label","description":"Label with required field display, htmlFor, and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true","defaultValue":{"value":"false","computed":false}}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** Label with required field display, htmlFor, and block styling */\r\nfunction Label({ htmlFor, label, required = false }) {\r\n  return (\r\n    <label htmlFor={htmlFor}>\r\n      {label} {required ? \"*\" : \"\"}\r\n    </label>\r\n  );\r\n}\r\n\r\nLabel.propTypes = {\r\n  /** HTML ID for associated input */\r\n  htmlFor: PropTypes.string.isRequired,\r\n\r\n  /** Label text */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Display asterisk after label if true */\r\n  required: PropTypes.bool,\r\n};\r\n\r\nexport default Label;\r\n","examples":[{"name":"ExampleOptionalLabel","description":"Optional label","code":"import React from \"react\";\r\nimport Label from \"ps-react/Label\";\r\n\r\n/** Optional label */\r\nexport default function ExampleOptionalLabel() {\r\n  return <Label htmlFor=\"test\" label=\"test\" />;\r\n}\r\n"},{"name":"ExampleRequiredLabel","description":"Required label","code":"import React from \"react\";\r\nimport Label from \"ps-react/Label\";\r\n\r\n/** Required label */\r\nexport default function ExampleRequiredLabel() {\r\n  return <Label htmlFor=\"test2\" label=\"test\" required />;\r\n}\r\n"}]},{"name":"Nav","description":"","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"id of the nav"},"items":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"htmlId":{"name":"string","required":true},"label":{"name":"string","required":true},"src":{"name":"string","required":false},"disabled":{"name":"bool","required":false},"active":{"name":"bool","required":false}}}},"required":false,"description":"Array of nav items","defaultValue":{"value":"[]","computed":false}}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport NavItem from \"../NavItem\";\r\n\r\nconst Nav = ({ htmlId, items = [], ...props }) => {\r\n  return (\r\n    <ul className=\"nav justify-content-center\">\r\n      {items.map((item) => (\r\n        <NavItem\r\n          key={item.htmlId}\r\n          htmlId={item.htmlId}\r\n          label={item.label}\r\n          src={item.src}\r\n          disabled={item.disabled}\r\n          active={item.active}\r\n          {...props}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nNav.propTypes = {\r\n  /** id of the nav */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Array of nav items */\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      htmlId: PropTypes.string.isRequired, // ID of the NavItem\r\n      label: PropTypes.string.isRequired, // Label of the NavItem\r\n      src: PropTypes.string, // Source URL for the NavItem\r\n      disabled: PropTypes.bool, // Disabled state of the NavItem\r\n      active: PropTypes.bool, // Active state of the NavItem\r\n    })\r\n  ),\r\n};\r\n\r\nexport default Nav;\r\n","examples":[{"name":"NavExample","description":"","code":"import React from \"react\";\r\nimport Nav from \"ps-react/Nav\";\r\n\r\nfunction NavExample() {\r\n  return <Nav htmlId=\"navItemHtmlId\" items={navItems} />;\r\n}\r\n\r\nexport default NavExample;\r\n\r\nconst navItems = [\r\n  {\r\n    htmlId: \"home\",\r\n    label: \"Home\",\r\n    src: \"/home\",\r\n    disabled: false,\r\n    active: true,\r\n  },\r\n  {\r\n    htmlId: \"about\",\r\n    label: \"About\",\r\n    src: \"/about\",\r\n    disabled: false,\r\n    active: false,\r\n  },\r\n  {\r\n    htmlId: \"services\",\r\n    label: \"Services\",\r\n    src: \"/services\",\r\n    disabled: false,\r\n    active: false,\r\n  },\r\n  {\r\n    htmlId: \"contact\",\r\n    label: \"Contact\",\r\n    src: \"/contact\",\r\n    disabled: true, // This item is disabled\r\n    active: false,\r\n  },\r\n];\r\n"}]},{"name":"NavBar","description":"","props":{"src":{"type":{"name":"string"},"required":true,"description":""},"siteName":{"type":{"name":"string"},"required":true,"description":""},"items":{"type":{"name":"array"},"required":false,"description":""}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Nav from \"../Nav\";\r\n\r\nconst NavBar = (props) => {\r\n  const { src, siteName, items = [] } = props;\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href={`${src}`}>\r\n        {siteName}\r\n      </a>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <Nav htmlId=\"navItemHtmlId\" items={items} />\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nNavBar.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  siteName: PropTypes.string.isRequired,\r\n  items: PropTypes.array,\r\n};\r\n\r\nexport default NavBar;\r\n","examples":[{"name":"NavBarExample","description":"All features enabled","code":"import React from \"react\";\r\nimport NavBar from \"ps-react/NavBar\";\r\n\r\n/** All features enabled */\r\nfunction NavBarExample() {\r\n  return <NavBar src=\"/home\" siteName=\"name\" items={navItems} />;\r\n  // return <div>sdsd</div>;\r\n}\r\n\r\nexport default NavBarExample;\r\n\r\nconst navItems = [\r\n  {\r\n    htmlId: \"home\",\r\n    label: \"Home\",\r\n    src: \"/home\",\r\n    disabled: false,\r\n    active: true,\r\n  },\r\n  {\r\n    htmlId: \"about\",\r\n    label: \"About\",\r\n    src: \"/about\",\r\n    disabled: false,\r\n    active: false,\r\n  },\r\n  {\r\n    htmlId: \"services\",\r\n    label: \"Services\",\r\n    src: \"/services\",\r\n    disabled: false,\r\n    active: false,\r\n  },\r\n  {\r\n    htmlId: \"contact\",\r\n    label: \"Contact\",\r\n    src: \"/contact\",\r\n    disabled: true, // This item is disabled\r\n    active: false,\r\n  },\r\n];\r\n"}]},{"name":"NavItem","description":"","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"id of the nav"},"label":{"type":{"name":"string"},"required":true,"description":"Label of the nav"},"src":{"type":{"name":"string"},"required":true,"description":"Lik reference"},"active":{"type":{"name":"bool"},"required":false,"description":"Disable nav element","defaultValue":{"value":"false","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable nav element","defaultValue":{"value":"false","computed":false}}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst NavItem = ({\r\n  htmlId,\r\n  label,\r\n  src,\r\n  disabled = false,\r\n  active = false,\r\n  ...props\r\n}) => {\r\n  // const classNames = `nav-link ${active ? \"active\" : \"\"} ${\r\n  //   disabled ? \"disabled\" : \"\"\r\n  // }`.trim();\r\n\r\n  return (\r\n    <li className=\"nav-item\" id={htmlId}>\r\n      <NavLink\r\n        to={src}\r\n        className={({ isActive }) => {\r\n          return isActive ? \"nav-link active\" : \"nav-link\";\r\n        }}\r\n        {...props}\r\n      >\r\n        <div>{label}</div>\r\n      </NavLink>\r\n    </li>\r\n  );\r\n};\r\n\r\nNavItem.propTypes = {\r\n  /** id of the nav */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Label of the nav */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Lik reference*/\r\n  src: PropTypes.string.isRequired,\r\n\r\n  /** Disable nav element */\r\n  active: PropTypes.bool,\r\n\r\n  /** Disable nav element */\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nexport default NavItem;\r\n","examples":[{"name":"NavItemActiveExample","description":"","code":"import React from \"react\";\r\nimport NavItem from \"ps-react/NavItem\";\r\n\r\nfunction NavItemActiveExample() {\r\n  return (\r\n    <NavItem\r\n      htmlId=\"navItemHtmlId\"\r\n      label=\"Internationalization\"\r\n      src=\"/home\"\r\n      disabled={false}\r\n      active={true}\r\n    />\r\n  );\r\n}\r\n\r\nexport default NavItemActiveExample;\r\n"},{"name":"NavItemDisableExample","description":"","code":"import React from \"react\";\r\nimport NavItem from \"ps-react/NavItem\";\r\n\r\nfunction NavItemDisableExample() {\r\n  return (\r\n    <NavItem\r\n      htmlId=\"navItemHtmlId\"\r\n      label=\"Internationalization\"\r\n      src=\"/home\"\r\n      disabled={true}\r\n      active={false}\r\n    />\r\n  );\r\n}\r\n\r\nexport default NavItemDisableExample;\r\n"},{"name":"NavItemExample","description":"","code":"import React from \"react\";\r\nimport NavItem from \"ps-react/NavItem\";\r\n\r\nfunction NavItemExample() {\r\n  return (\r\n    <NavItem\r\n      htmlId=\"navItemHtmlId\"\r\n      label=\"Internationalization\"\r\n      src=\"/home\"\r\n      disabled={false}\r\n      active={false}\r\n    />\r\n  );\r\n}\r\n\r\nexport default NavItemExample;\r\n"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"\"Password\"","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ProgressBar from \"../ProgressBar\";\r\nimport EyeIcon from \"../EyeIcon\";\r\nimport TextInput from \"../TextInput\";\r\n\r\n/** Password input with integrated label, quality tips, and show password toggle. */\r\nfunction PasswordInput({\r\n  htmlId,\r\n  name,\r\n  label = \"Password\",\r\n  type,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  maxLength = 50,\r\n  showVisibilityToggle = false,\r\n  quality,\r\n  ...props\r\n}) {\r\n  const { showPassword, setShowPassword } = useState(false);\r\n\r\n  const toggleShowPassword = (e) => {\r\n    setShowPassword(!showPassword);\r\n    if (e) e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <TextInput\r\n      htmlId={htmlId}\r\n      name={name}\r\n      label={label}\r\n      type={type}\r\n      required\r\n      onChange={onChange}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      maxLength={maxLength}\r\n      {...props}\r\n    >\r\n      {showVisibilityToggle && (\r\n        <a href=\"#\" onClick={toggleShowPassword} style={{ marginLeft: 5 }}>\r\n          <EyeIcon />\r\n        </a>\r\n      )}\r\n      {value.length > 0 && quality && (\r\n        <ProgressBar percent={quality} width={130} />\r\n      )}\r\n    </TextInput>\r\n  );\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default PasswordInput;\r\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React, { useState } from \"react\";\r\nimport PasswordInput from \"ps-react/PasswordInput\";\r\n\r\n/** All features enabled */\r\nfunction ExampleAllFeatures() {\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const getQuality = () => {\r\n    const length = password.length;\r\n    return length > 10 ? 100 : length * 10;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PasswordInput\r\n        htmlId=\"htmlIdPasword\"\r\n        name=\"password\"\r\n        type=\"password\"\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"Enter a password\"\r\n        value={password}\r\n        quality={getQuality()}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExampleAllFeatures;\r\n"},{"name":"ExampleJustToggleVisibility","description":"All features enabled","code":"import React, { useState } from \"react\";\r\nimport PasswordInput from \"ps-react/PasswordInput\";\r\n\r\n/** All features enabled */\r\nfunction ExampleJustToggleVisibility() {\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const getQuality = () => {\r\n    const length = password.length;\r\n    return length > 10 ? 100 : length * 10;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PasswordInput\r\n        htmlId=\"htmlId2Password\"\r\n        name=\"password\"\r\n        type=\"password\"\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"Enter a password\"\r\n        value={password}\r\n        quality={getQuality()}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExampleJustToggleVisibility;\r\n"}]},{"name":"ProgressBar","description":"Display progress between 0 and 100 percent on colorful horizontal bar.","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import {getWidthAsPercentOfTotalWidth} from '../../utils/percentUtils';\r\n\r\n/** Display progress between 0 and 100 percent on colorful horizontal bar. */\r\nclass ProgressBar extends React.Component {\r\n  getColor = (percent) => {\r\n    if (this.props.percent === 100) return \"green\";\r\n    return this.props.percent > 50 ? \"lightgreen\" : \"red\";\r\n  };\r\n\r\n  // Show this when using Enzyme to unit test func\r\n  getWidthAsPercentOfTotalWidth = () => {\r\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\r\n  };\r\n\r\n  render() {\r\n    const { percent, width, height } = this.props;\r\n    return (\r\n      <div style={{ border: \"solid 1px lightgray\", width }}>\r\n        <div\r\n          style={{\r\n            width: this.getWidthAsPercentOfTotalWidth(),\r\n            height,\r\n            backgroundColor: this.getColor(percent),\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProgressBar.propTypes = {\r\n  /** Percent of progress completed */\r\n  percent: PropTypes.number.isRequired,\r\n\r\n  /** Bar width */\r\n  width: PropTypes.number.isRequired,\r\n\r\n  /** Bar height */\r\n  height: PropTypes.number,\r\n};\r\n\r\nProgressBar.defaultProps = {\r\n  height: 5,\r\n};\r\n\r\nexport default ProgressBar;\r\n","examples":[{"name":"Example100PercentWithCustomHeight copy","description":"100% progress with 20px height","code":"import React from \"react\";\r\nimport ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 100% progress with 20px height */\r\nexport default function Example100PercentWithCustomHeight() {\r\n  return <ProgressBar percent={100} width={150} height={20} />;\r\n}\r\n"},{"name":"Example10Percent","description":"10% progress","code":"import React from \"react\";\r\nimport ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 10% progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={10} width={150} />;\r\n}\r\n"},{"name":"Example70Percent","description":"70% progress","code":"import React from \"react\";\r\nimport ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 70% progress */\r\nexport default function Example70Percent() {\r\n  return <ProgressBar percent={70} width={150} />;\r\n}\r\n"}]},{"name":"Select","description":"","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeHolder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty","defaultValue":{"value":"\"Select an option\"","computed":false}},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"options":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"value":{"name":"string","required":false},"label":{"name":"string","required":false}}}},"required":false,"description":"Value","defaultValue":{"value":"[]","computed":false}},"feedback":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\n\r\nconst Select = ({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  required = false,\r\n  onChange,\r\n  placeHolder = \"Select an option\",\r\n  value,\r\n  options = [],\r\n  feedback,\r\n  isSuccess,\r\n  ...props\r\n}) => {\r\n  const controlClassName = feedback\r\n    ? isSuccess\r\n      ? \"is-valid\"\r\n      : \"is-invalid\"\r\n    : \"\";\r\n  const feedbackClassName = feedback\r\n    ? isSuccess\r\n      ? \"valid-feedback\"\r\n      : \"invalid-feedback\"\r\n    : \"\";\r\n  return (\r\n    <div className=\"form-group\">\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n\r\n      <select\r\n        id={htmlId}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={`form-control ${controlClassName}`}\r\n        data-testid=\"select\"\r\n        {...props}\r\n      >\r\n        <option value=\"\" disabled>\r\n          {placeHolder}\r\n        </option>\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <div className=\"form-feedback\">\r\n        <small id=\"answerTextFeedback\" className={feedbackClassName}>\r\n          {feedback}\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Define PropTypes\r\nSelect.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeHolder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** Value */\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.string,\r\n      label: PropTypes.string,\r\n    })\r\n  ),\r\n\r\n  /** String to display when error occurs */\r\n  feedback: PropTypes.string,\r\n};\r\n\r\nexport default Select;\r\n","examples":[{"name":"exampleSelect","description":"With a custom message:","code":"import React, { useState } from \"react\";\r\nimport Select from \"ps-react/Select\";\r\n\r\n/** With a custom message: */\r\nexport default function ExampleButton() {\r\n  const [value, setValue] = useState(\"\");\r\n  const options = [\r\n    { label: \"Company Specifics\", value: \"CompanySpecifics\" },\r\n    { label: \"Open Category\", value: \"OpenCategory\" },\r\n  ];\r\n  function hadleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return (\r\n    <Select\r\n      htmlId=\"htmlIdSelect\"\r\n      name=\"name\"\r\n      label=\"Email\"\r\n      required={false}\r\n      onChange={hadleChange}\r\n      placeHolder={\"Select an option\"}\r\n      value={value}\r\n      options={options}\r\n    />\r\n  );\r\n}\r\n"},{"name":"FailureSelect","description":"With a custom message:","code":"import React, { useState } from \"react\";\r\nimport Select from \"ps-react/Select\";\r\n\r\n/** With a custom message: */\r\nexport default function FailureSelect() {\r\n  const [value, setValue] = useState(\"\");\r\n  const options = [\r\n    { label: \"Company Specifics\", value: \"CompanySpecifics\" },\r\n    { label: \"Open Category\", value: \"OpenCategory\" },\r\n  ];\r\n  function hadleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return (\r\n    <Select\r\n      htmlId=\"htmlIdSelect23\"\r\n      name=\"name\"\r\n      label=\"Email\"\r\n      required\r\n      onChange={hadleChange}\r\n      placeHolder={\"Select an option\"}\r\n      value={value}\r\n      options={options}\r\n      feedback=\"Invalid input\"\r\n      isSuccess={false}\r\n    />\r\n  );\r\n}\r\n"},{"name":"SucessSelect","description":"With a custom message:","code":"import React, { useState } from \"react\";\r\nimport Select from \"ps-react/Select\";\r\n\r\n/** With a custom message: */\r\nexport default function SucessSelect() {\r\n  const [value, setValue] = useState(\"\");\r\n  const options = [\r\n    { label: \"Company Specifics\", value: \"CompanySpecifics\" },\r\n    { label: \"Open Category\", value: \"OpenCategory\" },\r\n  ];\r\n  function hadleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return (\r\n    <Select\r\n      htmlId=\"htmlIdSelect44\"\r\n      name=\"name\"\r\n      label=\"Email\"\r\n      required={false}\r\n      onChange={hadleChange}\r\n      placeHolder={\"Select an option\"}\r\n      value={value}\r\n      options={options}\r\n      feedback=\"Valid input\"\r\n      isSuccess\r\n    />\r\n  );\r\n}\r\n"}]},{"name":"TextArea","description":"","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty","defaultValue":{"value":"\"\"","computed":false}},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"feedback":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\n\r\nconst TextArea = ({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  required = false,\r\n  onChange,\r\n  placeholder = \"\",\r\n  value,\r\n  feedback,\r\n  isSuccess,\r\n  ...props\r\n}) => {\r\n  const controlClassName = feedback\r\n    ? isSuccess\r\n      ? \"is-valid\"\r\n      : \"is-invalid\"\r\n    : \"\";\r\n  const feedbackClassName = feedback\r\n    ? isSuccess\r\n      ? \"valid-feedback\"\r\n      : \"invalid-feedback\"\r\n    : \"\";\r\n  return (\r\n    <div className=\"form-group\">\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <textarea\r\n        id={htmlId}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={`form-control ${controlClassName}`}\r\n        data-testid=\"textArea\"\r\n        {...props}\r\n      ></textarea>\r\n      <div className=\"form-feedback\">\r\n        <small\r\n          id=\"answerTextFeedback\"\r\n          data-testid=\"feedbackField\"\r\n          className={feedbackClassName}\r\n        >\r\n          {feedback}\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Define PropTypes\r\nTextArea.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  feedback: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default TextArea;\r\n","examples":[{"name":"exampleTextArea","description":"With a custom message:","code":"import React, { useState } from \"react\";\r\nimport TextArea from \"ps-react/TextArea\";\r\n\r\n/** With a custom message: */\r\nexport default function ExampleButton() {\r\n  const [value, setValue] = useState(\"\");\r\n  function hadleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return (\r\n    <TextArea\r\n      htmlId=\"htmlIdAreat1\"\r\n      name=\"name\"\r\n      label=\"Email\"\r\n      required={false}\r\n      onChange={hadleChange}\r\n      placeholder=\"Enter a name\"\r\n      value={value}\r\n    />\r\n  );\r\n}\r\n"},{"name":"failureTextArea","description":"With a custom message:","code":"import React, { useState } from \"react\";\r\nimport TextArea from \"ps-react/TextArea\";\r\n\r\n/** With a custom message: */\r\nexport default function SucessTextArea() {\r\n  const [value, setValue] = useState(\"\");\r\n  function hadleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return (\r\n    <TextArea\r\n      htmlId=\"htmlIdAreat12\"\r\n      name=\"name\"\r\n      label=\"Email\"\r\n      required\r\n      onChange={hadleChange}\r\n      placeholder=\"Enter a name\"\r\n      value={value}\r\n      feedback=\"Invalid input\"\r\n      isSuccess={false}\r\n    />\r\n  );\r\n}\r\n"},{"name":"sucessTextArea","description":"With a custom message:","code":"import React, { useState } from \"react\";\r\nimport TextArea from \"ps-react/TextArea\";\r\n\r\n/** With a custom message: */\r\nexport default function ExampleButton() {\r\n  const [value, setValue] = useState(\"\");\r\n  function hadleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return (\r\n    <TextArea\r\n      htmlId=\"htmlIdAreat13\"\r\n      name=\"name\"\r\n      label=\"Email\"\r\n      required={false}\r\n      onChange={hadleChange}\r\n      placeholder=\"Enter a name\"\r\n      value={value}\r\n      feedback=\"valid input message\"\r\n      isSuccess\r\n    />\r\n  );\r\n}\r\n"}]},{"name":"TextInput","description":"","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"\"text\"","computed":false},{"value":"\"number\"","computed":false},{"value":"\"password\"","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty","defaultValue":{"value":"\"\"","computed":false}},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"feedback":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\n\r\nconst TextInput = ({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder = \"\",\r\n  value,\r\n  feedback,\r\n  isSuccess,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const controlClassName = feedback\r\n    ? isSuccess\r\n      ? \"is-valid\"\r\n      : \"is-invalid\"\r\n    : \"\";\r\n  const feedbackClassName = feedback\r\n    ? isSuccess\r\n      ? \"valid-feedback\"\r\n      : \"invalid-feedback\"\r\n    : \"\";\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        name={name}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={`form-control ${controlClassName}`}\r\n        data-testid=\"textField\"\r\n        {...props}\r\n      />\r\n      {children}\r\n      <div className=\"form-feedback\">\r\n        <small\r\n          id=\"answerTextFeedback\"\r\n          data-testid=\"feedbackField\"\r\n          className={feedbackClassName}\r\n        >\r\n          {feedback}\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  feedback: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default TextInput;\r\n","examples":[{"name":"exampleTextInput","description":"With a custom message:","code":"import React, { useState } from \"react\";\r\nimport TextInput from \"ps-react/TextInput\";\r\n\r\n/** With a custom message: */\r\nexport default function ExampleButton() {\r\n  const [value, setValue] = useState(\"\");\r\n  function hadleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return (\r\n    <TextInput\r\n      htmlId=\"htmlIdInput1\"\r\n      name=\"name\"\r\n      label=\"Email\"\r\n      type=\"text\"\r\n      required={false}\r\n      onChange={hadleChange}\r\n      placeholder=\"Enter a name\"\r\n      value={value}\r\n    />\r\n  );\r\n}\r\n"},{"name":"failureTextInput","description":"With a custom message:","code":"import React, { useState } from \"react\";\r\nimport TextInput from \"ps-react/TextInput\";\r\n\r\n/** With a custom message: */\r\nexport default function FailureTextField() {\r\n  const [value, setValue] = useState(\"\");\r\n  function hadleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return (\r\n    <TextInput\r\n      htmlId=\"htmlIdInput12\"\r\n      name=\"name\"\r\n      label=\"Email\"\r\n      type=\"text\"\r\n      required\r\n      onChange={hadleChange}\r\n      placeholder=\"Enter a name\"\r\n      value={value}\r\n      feedback=\"This is an invalid name\"\r\n      isSuccess={false}\r\n    />\r\n  );\r\n}\r\n"},{"name":"successTextInput","description":"With a custom message:","code":"import React, { useState } from \"react\";\r\nimport TextInput from \"ps-react/TextInput\";\r\n\r\n/** With a custom message: */\r\nexport default function SuccessTextField() {\r\n  const [value, setValue] = useState(\"\");\r\n  function hadleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n  return (\r\n    <TextInput\r\n      htmlId=\"htmlIdInput13\"\r\n      name=\"name\"\r\n      label=\"Email\"\r\n      type=\"text\"\r\n      required={false}\r\n      onChange={hadleChange}\r\n      placeholder=\"Enter a email\"\r\n      value={value}\r\n      feedback=\"This is a valid email feedback\"\r\n      isSuccess={true}\r\n    />\r\n  );\r\n}\r\n"}]}]